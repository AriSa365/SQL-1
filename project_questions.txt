-- Question 1:
-- Find the total number of customers who have placed orders. What is the distribution of the customers across states? [4 marks]
-- Hint: For each state, count the number of customers

select state, count(distinct customer_id) as Distribution_of_Customer from customer_t 
where customer_id in (select distinct customer_id from order_t)
group by state order by Distribution_of_Customer desc;



-- Question 2:
-- Which are the top 5 vehicle makers preferred by the customers? [4 marks]
-- Hint: For each vehicle make what is the count of the customers.

select PT.vehicle_maker, count(distinct OT.customer_id) as total_no from product_t PT 
join order_t OT 
on PT.product_id = OT.product_id
group by PT.vehicle_maker order by total_no desc limit 5;



-- Question 3:
-- Which is the most preferred vehicle maker in each state? [4 marks]
-- Hint: Use the window function RANK() to rank based on the count of customers for each state and vehicle maker. 
-- After ranking, take the vehicle maker whose rank is 1.


SELECT state, vehicle_maker, total_customers, rank_no from (
    SELECT PT.vehicle_maker, 
           CT.state, 
           sum(OT.customer_id) AS total_customers,
           RANK() OVER (PARTITION BY CT.state ORDER BY sum(DISTINCT OT.customer_id) desc) AS rank_no
    FROM product_t PT
    JOIN order_t OT 
        ON PT.product_id = OT.product_id
    JOIN customer_t CT 
        ON OT.customer_id = CT.customer_id
    GROUP BY CT.state, PT.vehicle_maker
    Order by CT.state, PT.vehicle_maker
)
WHERE rank_no = 1
order by  total_customers desc;



-- Question 4:
-- Find the overall average rating given by the customers. What is the average rating in each quarter? [5 marks]
-- Consider the following mapping for ratings:
-- “Very Bad”: 1, “Bad”: 2, “Okay”: 3, “Good”: 4, “Very Good”: 5
-- Hint: Use subquery and assign numerical values to feedback categories using a CASE statement. 
-- Then, calculate the average feedback count per quarter. 
-- Use a subquery to convert feedback into numerical values and group by quarter_number to compute the average.

select quarter_number, avg(feedback_rating) as AVG_rating_per_q from (
select *, 
case when customer_feedback = 'Very Bad' then 1
when customer_feedback = 'Bad' then 2
when customer_feedback = 'Okay' then 3 
when customer_feedback = 'Good' then 4 
when customer_feedback = 'Very Good' then 5 
else 0 end as feedback_rating
from order_t)
group by quarter_number;


-- Question 5:
-- Find the percentage distribution of feedback from the customers. Are customers getting more dissatisfied over time? [5 marks]
-- Hint: Calculate the percentage of each feedback type by using conditional aggregation. 
-- For each feedback category, use a CASE statement to count the occurrences and then divide by the total count of feedback for the quarter, multiplied by 100 to get the percentage. 
-- Finally, group by quarter_number and order the results to reflect the correct sequence.


SELECT 
quarter_number,
SUM(CASE WHEN customer_feedback = 'Very Bad' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS very_bad_percentage,
SUM(CASE WHEN customer_feedback = 'Bad' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS bad_percentage,
SUM(CASE WHEN customer_feedback = 'Okay' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS okay_percentage,
SUM(CASE WHEN customer_feedback = 'Good' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS good_percentage,
SUM(CASE WHEN customer_feedback = 'Very Good' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS very_good_percentage
FROM 
order_t
GROUP BY 
quarter_number
ORDER BY 
quarter_number;

-- Question 6:
-- What is the trend of the number of orders by quarter? [3 marks]
-- Hint: Count the number of orders for each quarter.

select quarter_number,count(distinct order_id) as count_orders from order_t group by quarter_number;





-- Question 7:
-- Calculate the net revenue generated by the company. What is the quarter-over-quarter % change in net revenue? [5 marks]
-- Hint: Net Revenue is the amount obtained by multiplying the number of units sold by the price after deducting the discounts applied.
-- Quarter over Quarter percentage change in revenue means what is the change in revenue from the subsequent quarter to the previous quarter in percentage.
-- Calculate the revenue for each quarter by summing the quantity of product and the discounted vehicle price. 
-- Use the LAG function to get the revenue from the previous quarter, and then compute the quarter-over-quarter percentage change based on the current and previous revenue values.
-- Ensure the results are ordered by quarter_number to maintain the correct sequence.

select 
quarter_number, a.revenue, lag(a.revenue,1,0) over(order by quarter_number) as Prev_q_revenue,
(a.revenue-(lag(a.revenue,1,0) over(order by quarter_number)))/(lag(a.revenue,1,0) over(order by quarter_number))*100 as QOQ 
from
(
select quarter_number, SUM(QUANTITY*(VEHICLE_PRICE-(VEHICLE_PRICE*DISCOUNT))) as revenue 
from order_t group by quarter_number 
) as a group by quarter_number  order by quarter_number ;


-- Question 8:
-- What is the trend of net revenue and orders by quarters? [4 marks]
-- Hint: Find out the sum of net revenue and count the number of orders for each quarter.
we have columns like quarter_number,QUANTITY, VEHICLE_PRICE, DISCOUNT in order_t table

select 
quarter_number, SUM(QUANTITY*(VEHICLE_PRICE-(VEHICLE_PRICE*DISCOUNT))) as net_revenue, COUNT(*) AS order_count 
from order_t 
group by quarter_number 
order by quarter_number;



-- Question 9:
-- What is the average discount offered for different types of credit cards? [3 marks]
-- Hint: Find out the average of discount for each credit card type.

 select credit_card_type, avg(discount) as AVG_discount, count(*) as No_of_customers
 from customer_t CT 
 join order_t OT 
 on OT.customer_id = CT.customer_id group by credit_card_type order by No_of_customers;


-- Question 10:
-- What is the average time taken to ship the placed orders for each quarter? [3 marks]
-- Hint: Please use the julianday function instead of the DATEDIFF function to find the difference between the ship date and the order date.
-- The SQL Playground Editor is built on the SQLite platform, which doesn’t support the DATEDIFF function available in MySQL



SELECT quarter_number, AVG(julianday(ship_date) - julianday(order_date)) AS avg_shipping_time
FROM order_t
GROUP BY quarter_number
ORDER BY quarter_number;